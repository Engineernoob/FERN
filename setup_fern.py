import subprocess
import sys
from pathlib import Path

# folders for the FERN project
folders = [
    "fern/core",
    "fern/tools",
    "fern/rl",
    "fern/tasks",
    "fern/templates/py_lib",
    ".fern"
]

# starter files with minimal boilerplate
files = {
    "fern/cli.py": """# Entry CLI for FERN
def main():
    print("FERN üå± is ready to help build your project.")

if __name__ == "__main__":
    main()
""",
    "fern/core/agent.py": "# Core agent loop\n",
    "fern/core/planner.py": "# Planner logic\n",
    "fern/core/prompts.py": "# Prompt templates\n",
    "fern/core/state.py": "# Repo state management\n",
    "fern/tools/fs.py": "# Filesystem utilities\n",
    "fern/tools/git.py": "# Git integration\n",
    "fern/tools/github.py": "# GitHub integration\n",
    "fern/tools/llm.py": "# LLM provider integration\n",
    "fern/tools/shell.py": "# Shell helpers\n",
    "fern/tools/fix_strategies.py": "# Fix strategies for RL\n",
    "fern/rl/experience.py": "# Experience logging with DuckDB\n",
    "fern/rl/bandit.py": "# Thompson sampling bandit\n",
    "fern/rl/learner.py": "# Learner wrapper\n",
    "fern/tasks/scaffold.py": "# Project scaffolding\n",
    "fern/tasks/implement.py": "# Implement tasks\n",
    "fern/tasks/review.py": "# Review tasks\n",
    "fern/templates/py_lib/pyproject.toml.j2": "[project]\nname = '{{ name }}'\n",
    "fern/templates/py_lib/README.md.j2": "# {{ name }}\nGenerated by FERN üå±\n",
    "fern/templates/py_lib/package/__init__.py.j2": "__version__='0.1.0'\n",
    "fern.plan.json": '{ "goals": ["Scaffold project"] }\n',
    "requirements.txt": """typer[all]
rich
duckdb
GitPython
PyGithub
httpx
jinja2
pytest
ruff
mypy
"""
}

def create_structure():
    for folder in folders:
        Path(folder).mkdir(parents=True, exist_ok=True)
    for filepath, content in files.items():
        path = Path(filepath)
        path.parent.mkdir(parents=True, exist_ok=True)
        if not path.exists():
            path.write_text(content)
    print("üå± FERN project structure created!")

def create_virtualenv():
    venv_dir = Path(".venv")
    if not venv_dir.exists():
        print("üì¶ Creating virtual environment in .venv...")
        subprocess.check_call([sys.executable, "-m", "venv", ".venv"])
    else:
        print("‚ÑπÔ∏è Virtual environment already exists, skipping.")

def install_requirements():
    pip_exe = Path(".venv/bin/pip") if sys.platform != "win32" else Path(".venv/Scripts/pip.exe")
    print("üì• Installing dependencies into .venv...")
    subprocess.check_call([str(pip_exe), "install", "-r", "requirements.txt"])

if __name__ == "__main__":
    create_structure()
    create_virtualenv()
    install_requirements()
    print("‚úÖ Setup complete. Activate with:")
    if sys.platform == "win32":
        print("   .venv\\Scripts\\activate")
    else:
        print("   source .venv/bin/activate")
    print("Then run:")
    print("   python fern/cli.py")
